from tkinter import messagebox
import numpy as np
from tkinter import *
from tkinter import filedialog
import tkinter as tk
from PIL import Image, ImageTk
import os
from stegano import lsb
import base64
import io
import cv2

byte_icon = b''


frame_storage = "None"
def BinaryToDecimal(binary):
    string = int(binary, 2)
    return string

def msgtobinary(msg):
    if type(msg) == str:
        result= ''.join([ format(ord(i), "08b") for i in msg ])

    elif type(msg) == bytes or type(msg) == np.ndarray:
        result= [ format(i, "08b") for i in msg ]

    elif type(msg) == int or type(msg) == np.uint8:
        result=format(msg, "08b")

    else:
        raise TypeError("Input type is not supported in this function")

    return result


def KSA(key):
    key_length = len(key)
    S=list(range(256))
    j=0
    for i in range(256):
        j=(j+S[i]+key[i % key_length]) % 256
        S[i],S[j]=S[j],S[i]
    return S


def PRGA(S,n):
    i=0
    j=0
    key=[]
    while n>0:
        n=n-1
        i=(i+1)%256
        j=(j+S[i])%256
        S[i],S[j]=S[j],S[i]
        K=S[(S[i]+S[j])%256]
        key.append(K)
    return key


def preparing_key_array(s):
    return [ord(c) for c in s]




def encryption(plaintext):
    key=code.get()
    key=preparing_key_array(key)

    S=KSA(key)

    keystream=np.array(PRGA(S,len(plaintext)))
    plaintext=np.array([ord(i) for i in plaintext])

    cipher=keystream^plaintext
    ctext=''
    for c in cipher:
        ctext=ctext+chr(c)
    return ctext



def decryption(ciphertext):

    key=code.get()
    key=preparing_key_array(key)

    S=KSA(key)

    keystream=np.array(PRGA(S,len(ciphertext)))
    ciphertext=np.array([ord(i) for i in ciphertext])

    decoded=keystream^ciphertext
    dtext=''
    for c in decoded:
        dtext=dtext+chr(c)
    return dtext

def embed(frame):
    data = Data_for_hiding.get()
    data = encryption(data)
    if (len(data) == 0):
        raise ValueError('Data entered to be encoded is empty')

    data += '*^*^*'

    binary_data = msgtobinary(data)
    length_data = len(binary_data)

    index_data = 0

    for i in frame:
        for pixel in i:
            r, g, b = msgtobinary(pixel)
            if index_data < length_data:
                pixel[0] = int(r[:-1] + binary_data[index_data], 2)
                index_data += 1
            if index_data < length_data:
                pixel[1] = int(g[:-1] + binary_data[index_data], 2)
                index_data += 1
            if index_data < length_data:
                pixel[2] = int(b[:-1] + binary_data[index_data], 2)
                index_data += 1
            if index_data >= length_data:
                break
        return frame


def extract(frame):
    data_binary = ""
    final_decoded_msg = ""
    for i in frame:
        for pixel in i:
            r, g, b = msgtobinary(pixel)
            data_binary += r[-1]
            data_binary += g[-1]
            data_binary += b[-1]
            total_bytes = [data_binary[i: i + 8] for i in range(0, len(data_binary), 8)]
            decoded_data = ""
            for byte in total_bytes:
                decoded_data += chr(int(byte, 2))
                if decoded_data[-5:] == "*^*^*":
                    for i in range(0, len(decoded_data) - 5):
                        final_decoded_msg += decoded_data[i]
                    final_decoded_msg = decryption(final_decoded_msg)

                    screen1 = Toplevel(screen)
                    screen1.title("Reveal Data")
                    screen1.geometry("440x200")
                    screen1.configure(bg="#00bd56")

                    Label(screen1, text="REVEAL DATA", font="arial", fg="white", bg="#00bd56").place(x=10, y=0)
                    text2 = Text(screen1, font="Robote 15", bg="white", relief=GROOVE, wrap=WORD, bd=0)
                    text2.place(x=30, y=40, width=380, height=150)
                    text2.insert(END, final_decoded_msg)

                    scrollbar1 = Scrollbar(screen1)
                    scrollbar1.place(x=415, y=40, height=150)

                    return

def encode_vid_data():
    global frame_storage
    filename_func = str(text_filename.get("1.0", 'end-1c'))
    cap = cv2.VideoCapture(filename_func)
    vidcap = cv2.VideoCapture(filename_func)
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    frame_width = int(vidcap.get(3))
    frame_height = int(vidcap.get(4))

    size = (frame_width, frame_height)
    out = cv2.VideoWriter(f'{filename_func} _hidden.mp4', fourcc, 25.0, size)
    max_frame = 0;
    while (cap.isOpened()):
        ret, frame = cap.read()
        if ret == False:
            break
        max_frame += 1
    cap.release()
    # print("Total number of Frame in selected Video :", max_frame)
    # print("Enter the frame number where you want to embed data : ")

    n = frame_num.get()
    if n>max_frame:
        messagebox.showerror("Out Of Frames", f"Maximum number of frames in selected video is {max_frame} only")
    else:
        frame_number = 0
        while (vidcap.isOpened()):
            frame_number += 1
            ret, frame = vidcap.read()
            if ret == False:
                break
            if frame_number == n:
                change_frame_with = embed(frame)
                frame_ = change_frame_with
                frame = change_frame_with

                frame_storage = frame_
            out.write(frame)
        successful = f"The data embedded successfully "
        screen1 = Toplevel(screen)
        screen1.title("Hide Data")
        screen1.geometry("440x200")
        screen1.configure(bg="#ed3833")

        Label(screen1, text="HIDE DATA", font="arial", fg="white", bg="#ed3833").place(x=10, y=0)
        text2 = Text(screen1, font="Robote 15", bg="white", relief=GROOVE, wrap=WORD, bd=0)
        text2.place(x=30, y=40, width=380, height=150)
        text2.insert(END, successful)

        scrollbar1 = Scrollbar(screen1)
        scrollbar1.place(x=415, y=40, height=150)

def hide_data():
    global frame_storage
    encode_vid_data()


def decode_vid_data(frame_):
    filename_func = str(text_filename.get("1.0", 'end-1c'))

    cap = cv2.VideoCapture(filename_func)
    max_frame=0;
    while(cap.isOpened()):
        ret, frame = cap.read()
        if ret == False:
            break
        max_frame+=1

    n = frame_num.get()

    vidcap = cv2.VideoCapture(filename_func)
    frame_number = 0
    while(vidcap.isOpened()):
        frame_number += 1
        ret, frame = vidcap.read()
        if ret == False:
            break
        if frame_number == n:
            extract(frame_)
            return

def reveal_data():
    global frame_storage
    a = decode_vid_data(frame_storage)


def main_screen():
    global screen
    global text_filename
    global code
    global filename
    global Data_for_hiding
    global frame_num

    screen = Tk()
    screen.geometry("1360x768")
    screen.title("Video Steganography ")

    text_filename = Text(screen, font="Robote 15", bg="white", relief=GROOVE, bd=2, width=70, height=1.5)
    text_filename.place(x=300, y=100)

    Label(text="Enter the data that you want to hide", fg="black", font=("calbri", 19, "bold")).place(x=490,y=160)

    Data_for_hiding = StringVar()
    Entry(textvariable=Data_for_hiding, width=43, bd=2, font=("arial", 25)).place(x=300, y=215)


    # icon
    b1 = base64.b64decode(byte_icon)
    img1 = Image.open(io.BytesIO(b1))
    image_icon = ImageTk.PhotoImage(img1)
    screen.iconphoto(False, image_icon)


    def reset():
        code.set("")
        text_filename.delete(1.0, END)
        Data_for_hiding.set("")
        frame_num.set(0)


    def select_video_file():
        filename = filedialog.askopenfilename(initialdir=os.getcwd(),
                                              title="Select video file",
                                              filetype=[("all video format", ".mp4"),
                                                        ("all video format", ".flv"),
                                                        ("all video format", ".avi"),
                                                        ("all text format", ".txt"),
                                                        ])

        text_filename.insert("1.0", filename)

    Label(text="Enter Secret Key For Encryption & Decryption", fg="black", font=("calbri", 19, "bold")).place(x=460,y=280)

    code = StringVar()
    Entry(textvariable=code, width=43, bd=2, font=("arial", 25), show="*").place(x=300, y=320)

    Label(text="Enter Secret Frame Number", fg="black", font=("calbri", 19, "bold")).place(x=540,y=370)
    frame_num = IntVar()
    Entry(textvariable=frame_num, width=43, bd=2, font=("arial", 25)).place(x=300, y=420)

    Button(text="Select File", font=("times new roman", 13, "bold"), height="3", width=30, bg="#ed3833", fg="white",
           bd=2, command=select_video_file).place(x=540, y=15)
    Button(text="Hide", font=("times new roman", 13, "bold"), height="3", width=30, bg="#ed3833", fg="white", bd=2,
           command=hide_data).place(x=300, y=490)
    Button(text="Reveal", font=("times new roman", 13, "bold"), height="3", width=30, bg="#00bd56", fg="white", bd=2,
           command=reveal_data).place(x=770, y=490)
    Button(text="RESET", font=("times new roman", 13, "bold"), height="3", width=30, bg="#1089ff", fg="white", bd=2,
           command=reset).place(x=540, y=600)

    screen.mainloop()


main_screen()